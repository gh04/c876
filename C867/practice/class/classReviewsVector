#include <iostream>
#include <string>
#include <vector>
using namespace std;

/*
    The program below redoes the example above, creating a Reviews 
    class for managing a vector of Review objects.

    The Reviews class has functions for reading reviews and printing 
    comments. The resulting main() is clearer than above.

    The Reviews class has a "getter" function returning the average 
    rating. The function computes the average rather than reading a 
    private data member. The class user does not need to know how the 
    function is implemented.
*/

// This class creates a single instance of a review
class Review {
   public:
   // You can set the rating and comment for a single review. Inline method.
      void SetRatingAndComment(int revRating, string revComment) {
         rating = revRating;
         comment = revComment;
      }
      // You can get a the rating and comment for a single review. Inline method.
      int GetRating() const { return rating; }
      string GetComment() const { return comment; }
   // Private members default if no rating and or comment was provided.
   private:
      int rating = -1;
      string comment = "NoComment";
};
// END Review class

// Class gets reviews from users
class Reviews {
   public:
    // Function declarations
      void InputReviews(); // Asks for reviews
      void PrintCommentsForRating(int currRating) const; 
      int GetAverageRating() const;

   private:
      vector<Review> reviewList;
};

// Get rating comment pairs, add each to list. -1 rating ends.
void Reviews::InputReviews() {
   Review currReview;
   int currRating;
   string currComment;

   cin >> currRating;
   while (currRating >= 0) {
      getline(cin, currComment); // Gets rest of line
      currReview.SetRatingAndComment(currRating, currComment);
      reviewList.push_back(currReview);
      cin >> currRating;
   }
}

// Print all comments for reviews having the given rating
void Reviews::PrintCommentsForRating(int currRating) const {
   Review currReview;
   unsigned int i;

   for (i = 0; i < reviewList.size(); ++i) {
      currReview = reviewList.at(i);
      if (currRating == currReview.GetRating()) {
         cout << currReview.GetComment() << endl;
      }
   }
}

int Reviews::GetAverageRating() const {
   int ratingsSum;
   unsigned int i;

   ratingsSum = 0;
   for (i = 0; i < reviewList.size(); ++i) {
      ratingsSum += reviewList.at(i).GetRating();
   }
   return (ratingsSum / reviewList.size());
}
// END Reviews class

int main() {
   Reviews allReviews;
   string currName;
   int currRating;

   cout << "Type ratings + comments. To end: -1" << endl;
   allReviews.InputReviews();

   cout << endl << "Average rating: ";
   cout << allReviews.GetAverageRating() << endl;

   // Output all comments for given rating
   cout << endl << "Type rating. To end: -1" << endl;
   cin >> currRating;
   while (currRating != -1) {
      allReviews.PrintCommentsForRating(currRating);
      cin >> currRating;
   }

   return 0;
}